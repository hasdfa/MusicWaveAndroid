package com.vadim.hasdfa.musicwave.models

import com.google.gson.annotations.SerializedName
import java.io.Serializable

//type AutoGenerated struct {
//    Artists struct {
//        Artist []struct {
//            Name       string `json:"name"`
//            Playcount  string `json:"playcount"`
//            Listeners  string `json:"listeners"`
//            Mbid       string `json:"mbid"`
//            URL        string `json:"url"`
//            Streamable string `json:"streamable"`
//            Image      []struct {
//                Text string `json:"#text"`
//                Size string `json:"size"`
//            } `json:"image"`
//        } `json:"artist"`
//        Attr struct {
//            Page       string `json:"page"`
//            PerPage    string `json:"perPage"`
//            TotalPages string `json:"totalPages"`
//            Total      string `json:"total"`
//        } `json:"@attr"`
//    } `json:"artists"`
//}

data class TopArtists(
    @SerializedName("artists")
    var artists: Artists = Artists()
)

data class Artists(
    @SerializedName("artist")
    var artist: List<Artist> = emptyList()
): Serializable

data class Artist(
    @SerializedName("name")
    var name: String = "",

    @SerializedName("playcount")
    var playcount: String = "",

    @SerializedName("listeners")
    var listeners: String = "",

    @SerializedName("mbid")
    var mbid: String = "",

    @SerializedName("url")
    var url: String = "",

    @SerializedName("streamable")
    var streamable: String = "",

    @SerializedName("image")
    var image: ImagesList
): Serializable {


    val playcountValue: String
        get() = convert(playcount)

    val listenersValue: String
        get() = convert(listeners)

    private fun convert(s: String): String {
        val num = s.toIntOrNull() ?: return s

        if (num / 1_000_000 > 0)
            return "${"%.2f".format(num.toFloat() / 1_000_000)}M"
        if (num / 1_000 > 0)
            return "${"%.2f".format(num.toFloat() / 1_000)}K"
        return s
    }
}

typealias ImagesList = List<Image>
fun ImagesList.get(s: Image.Size): Image? = firstOrNull { it.size == s }

fun ImagesList.small(): Image? = get(Image.Size.Small)
fun ImagesList.medium(): Image? = get(Image.Size.Medium)
fun ImagesList.large(): Image? = get(Image.Size.Large)
fun ImagesList.extralarge(): Image? = get(Image.Size.Extralarge)
fun ImagesList.mega(): Image? = get(Image.Size.Mega)


data class Image(
    @SerializedName("#text")
    var url: String = "",

    @SerializedName("sie")
    var size: Size = Size.Undefined
): Serializable {

    enum class Size {
        @SerializedName("small")
        Small,

        @SerializedName("medium")
        Medium,

        @SerializedName("large")
        Large,

        @SerializedName("extralarge")
        Extralarge,

        @SerializedName("mega")
        Mega,

        Undefined
    }
}